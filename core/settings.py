"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 5.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# pip install python-decouple
from decouple import config

from datetime import timedelta

# pip install dj-database-url
import dj_database_url

from import_export.formats.base_formats import CSV, XLSX

IMPORT_FORMATS = [CSV, XLSX]
EXPORT_FORMATS = [XLSX, CSV]
# pip install "tablib[xlsx]"

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-(x5_^%xb^0f^3f0e_2$i!!8gup^+sruewtd_y)zg$em$*(mfgt"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]


# Application definition

INSTALLED_APPS = [
    # For Custom Admin Interface
    "admin_interface",
    "colorfield",
    # ----------------#
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # Third-party apps
    "taggit",
    "phonenumber_field",
    "django_countries",
    "import_export",
    "rest_framework",
    "corsheaders",
    "django_filters",
    "rest_framework_simplejwt",
    "rest_framework.authtoken",
    "dj_rest_auth",
    "dj_rest_auth.registration",
    "djoser",
    "authentication",
    "location",
    "messaging",
    "favorites",
    "listing",
    "search",
    "theme",
    "pages",
    "users",
    # Django Allauth
    "django.contrib.sites",  # Obligatoire pour django-allauth
    "allauth",
    "allauth.account",
    "allauth.socialaccount",
    "allauth.socialaccount.providers.google",
    "allauth.socialaccount.providers.facebook",
    "allauth.socialaccount.providers.github",
    "allauth.socialaccount.providers.linkedin_oauth2",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",  # for production static files
    "corsheaders.middleware.CorsMiddleware",  # CORS middleware should be at the top
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "allauth.account.middleware.AccountMiddleware",  # middleware
]

ROOT_URLCONF = "core.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        #'DIRS': [BASE_DIR / 'templates'],
        "DIRS": [
            os.path.join(BASE_DIR, "templates"),
            os.path.join(BASE_DIR, "templates", "allauth"),
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                # Custom context processors for listing app / categories & subcategories
                "listing.context_processors.categories_processor",
            ],
        },
    },
]

WSGI_APPLICATION = "core.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

# Configuration de la base de données
# if DEBUG:
#     # Base de données de développement
#     DATABASE_URL = config(
#         'DEV_DATABASE_URL',
#         default= 'sqlite:///' + str(BASE_DIR / 'db.sqlite3')
#     )
# else:
#     # Base de données de production
#     DATABASE_URL = config(
#         'PROD_DATABASE_URL',
#         default= ''
#     )

DATABASE_URL = "sqlite:///db.sqlite3"
DATABASES = {
    "default": dj_database_url.parse(
        DATABASE_URL, conn_max_age=600, conn_health_checks=True
    )
}

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = "static/"
# STATIC_URL = '/static/'
STATICFILES_DIRS = [BASE_DIR / "static"]
# STATIC_ROOT = BASE_DIR / 'staticfiles'
STATIC_ROOT = BASE_DIR / "assets"

# for production static files
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"


# Media files (Images, Videos, etc)
MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "media"

# MEDIA_ROOT = os.path.join(BASE_DIR, 'uploads')
# MEDIA_URL = '/uploads/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


# Custom User Model
AUTH_USER_MODEL = "authentication.User"


# Make tags case insensitive
TAGGIT_CASE_INSENSITIVE = True

# # Configure tag string parsing
# TAGGIT_TAGS_FROM_STRING = 'custom_tags.tag_splitter'  # Your custom parsing function

# # Configure tag string representation
# TAGGIT_STRING_FROM_TAGS = 'custom_tags.tag_joiner'    # Your custom joining function

# Configuration pour phonenumber_field
PHONENUMBER_DB_FORMAT = "E164"  # Format de stockage en base

# Configuration Django Allauth
AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend",
    "allauth.account.auth_backends.AuthenticationBackend",
]

SITE_ID = 1

LOGIN_REDIRECT_URL = "/admin"  # Redirection après connexion
LOGOUT_REDIRECT_URL = "/accounts/signup"  # Redirection après déconnexion

# Configuration email (à adapter selon votre configuration)
EMAIL_BACKEND = (
    "django.core.mail.backends.console.EmailBackend"  # Pour le développement
)

# Configuration des providers sociaux
SOCIALACCOUNT_PROVIDERS = {
    "google": {
        "APP": {
            "client_id": config("GOOGLE_CLIENT_ID"),
            "secret": config("GOOGLE_SECRET"),
            "key": "",
        },
        "SCOPE": [
            "profile",
            "email",
        ],
        "AUTH_PARAMS": {
            "access_type": "online",
        },
    },
    "facebook": {
        "APP": {
            "client_id": config("FACEBOOK_CLIENT_ID"),
            "secret": config("FACEBOOK_SECRET"),
            "key": "",
        },
        "METHOD": "oauth2",
        "SCOPE": ["email", "public_profile"],
        "VERSION": "v15.0",
    },
    "github": {
        "APP": {
            "client_id": config("GITHUB_CLIENT_ID"),
            "secret": config("GITHUB_SECRET"),
            "key": "",
        },
        "SCOPE": [
            "user",
            "repo",
            "read:org",
        ],
    },
    "linkedin_oauth2": {
        "APP": {
            "client_id": config("LINKEDIN_CLIENT_ID"),
            "secret": config("LINKEDIN_SECRET"),
            "key": "",
        },
        "SCOPE": ["r_liteprofile", "r_emailaddress"],
        "PROFILE_FIELDS": [
            "id",
            "first-name",
            "last-name",
            "email-address",
            "picture-url",
            "public-profile-url",
        ],
    },
}


# j'aimerais afficer les clefs dans la console pour les tester
# print(f"Clef Google : {config('GOOGLE_CLIENT_ID')}")
# print(f"Secret Google : {config('GOOGLE_SECRET')}")


# Cloudinary Setup
CLOUDINARY_CLOUD_NAME = config("CLOUDINARY_CLOUD_NAME", default="default_cloud_name")
CLOUDINARY_PUBLIC_API_KEY = config(
    "CLOUDINARY_PUBLIC_API_KEY", default="default_public_api_key"
)
CLOUDINARY_SECRET_API_KEY = config(
    "CLOUDINARY_SECRET_API_KEY", default="default_secret_api_key"
)
CLOUDINARY_URL = config(
    "CLOUDINARY_URL",
    default="cloudinary://596271478687376:d@default_secret_api_key@default_cloud_name",
)

# Django REST Framework settings
REST_FRAMEWORK = {
    # Utiliser par défaut une permission qui permet à tous d'accéder en lecture
    # mais qui exige l'authentification pour les requêtes d'écriture
    "DEFAULT_PERMISSION_CLASSES": [
        "listing.permissions.IsAuthenticatedForWriteOrReadOnly",
    ],
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework.authentication.SessionAuthentication",
        "rest_framework.authentication.BasicAuthentication",
    ],
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "PAGE_SIZE": 9,
    "DEFAULT_FILTER_BACKENDS": ["django_filters.rest_framework.DjangoFilterBackend"],
}

# CORS settings
CORS_ALLOW_ALL_ORIGINS = (
    True  # Set to False in production and use CORS_ALLOWED_ORIGINS instead
)
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",  # React default port
    "http://127.0.0.1:3000",
    "http://localhost:5173",
]
CORS_ALLOW_CREDENTIALS = True

# JWT Settings
SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=15),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=7),
    "ROTATE_REFRESH_TOKENS": True,
    "BLACKLIST_AFTER_ROTATION": True,
    "AUTH_HEADER_TYPES": ("Bearer",),
    "AUTH_HEADER_NAME": "HTTP_AUTHORIZATION",
    "USER_ID_FIELD": "id",
    "USER_ID_CLAIM": "user_id",
    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
    "TOKEN_TYPE_CLAIM": "token_type",
    "JTI_CLAIM": "jti",
}

# REST Auth Settings
REST_AUTH = {
    "USE_JWT": True,
    "JWT_AUTH_COOKIE": "jwt-auth",
    "JWT_AUTH_REFRESH_COOKIE": "jwt-refresh-token",
    "JWT_AUTH_SECURE": False,  # Set to True in production with HTTPS
    "JWT_AUTH_HTTPONLY": True,
    "JWT_AUTH_SAMESITE": "Lax",
    "SESSION_LOGIN": False,
    "TOKEN_MODEL": None,
}

# Djoser settings
DJOSER = {
    "PASSWORD_RESET_CONFIRM_URL": "password/reset/confirm/{uid}/{token}",
    "USERNAME_RESET_CONFIRM_URL": "username/reset/confirm/{uid}/{token}",
    "ACTIVATION_URL": "activate/{uid}/{token}",
    "SEND_ACTIVATION_EMAIL": True,
    "SERIALIZERS": {},
}

# Update DRF settings to use JWT
REST_FRAMEWORK = {
    "DEFAULT_PERMISSION_CLASSES": [
        "listing.permissions.IsAuthenticatedForWriteOrReadOnly",
    ],
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework_simplejwt.authentication.JWTAuthentication",
        "rest_framework.authentication.SessionAuthentication",
        "rest_framework.authentication.BasicAuthentication",
    ],
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "PAGE_SIZE": 9,
    "DEFAULT_FILTER_BACKENDS": ["django_filters.rest_framework.DjangoFilterBackend"],
}

# Custom Account Adapter
ACCOUNT_ADAPTER = "authentication.adapters.CustomAccountAdapter"
SOCIALACCOUNT_ADAPTER = "authentication.adapters.CustomSocialAccountAdapter"

# Account settings
ACCOUNT_AUTHENTICATION_METHOD = "email"
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_EMAIL_VERIFICATION = "mandatory"
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS = 7
ACCOUNT_CONFIRM_EMAIL_ON_GET = True

# Registration settings
ACCOUNT_ALLOW_REGISTRATION = True
SOCIALACCOUNT_ALLOW_REGISTRATION = True
SOCIALACCOUNT_EMAIL_VERIFICATION = "none"
SOCIALACCOUNT_AUTO_SIGNUP = True
SOCIALACCOUNT_QUERY_EMAIL = True
