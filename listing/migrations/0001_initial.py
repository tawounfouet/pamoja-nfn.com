# Generated by Django 5.1.4 on 2025-03-23 21:36

import cloudinary.models
import django.contrib.postgres.search
import django.core.validators
import django.db.models.deletion
import taggit.managers
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('users', '__first__'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('slug', models.SlugField(blank=True, null=True, unique=True)),
                ('description', models.TextField(blank=True, default='', null=True)),
                ('image', models.ImageField(blank=True, null=True, upload_to='category_images/')),
            ],
            options={
                'verbose_name_plural': '1. Categories',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='CustomTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='name')),
                ('slug', models.SlugField(allow_unicode=True, max_length=100, unique=True, verbose_name='slug')),
            ],
            options={
                'verbose_name': 'Tag',
                'verbose_name_plural': 'Tags',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Listing',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('owner', models.CharField(blank=True, default='Pamoja', max_length=200, null=True)),
                ('type', models.CharField(blank=True, choices=[('IND', 'Individuel'), ('COM', 'Entreprise')], default='IND', max_length=3, null=True)),
                ('title', models.CharField(default='', max_length=200)),
                ('company_name', models.CharField(blank=True, max_length=200, null=True)),
                ('location', models.TextField(blank=True, default='', null=True)),
                ('description', models.TextField(blank=True, default='', null=True)),
                ('logo', cloudinary.models.CloudinaryField(blank=True, max_length=255, null=True, verbose_name='listing_featured_image')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('website_url', models.URLField(blank=True, default='', null=True)),
                ('status', models.CharField(choices=[('ACT', 'Actif'), ('INA', 'Inactif'), ('PEN', 'En attente de validation')], default='PEN', max_length=3)),
                ('average_rating', models.DecimalField(decimal_places=2, default=0.0, max_digits=3, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)])),
                ('search_vector', django.contrib.postgres.search.SearchVectorField(blank=True, help_text='PostgreSQL full-text search vector', null=True)),
                ('slug', models.SlugField(blank=True, default=None, help_text='Unique URL identifier', max_length=255, null=True, unique=True)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='listing.category')),
                ('profile', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='listings', to='users.profile')),
            ],
            options={
                'verbose_name_plural': '3. Annonces',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='ContactInformation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mobile_phone', models.CharField(blank=True, max_length=20, null=True)),
                ('whatsapp_number', models.CharField(blank=True, max_length=20, null=True)),
                ('contact_email', models.EmailField(blank=True, max_length=254, null=True)),
                ('preferred_contact', models.CharField(choices=[('email', 'Email'), ('phone', 'Téléphone'), ('whatsapp', 'WhatsApp')], default='email', max_length=10)),
                ('listing', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='contact_details', to='listing.listing')),
            ],
            options={
                'verbose_name_plural': '6. Informations de contact',
            },
        ),
        migrations.CreateModel(
            name='Analytics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('views', models.PositiveIntegerField(default=0)),
                ('engagement_metrics', models.JSONField(default=dict)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('listing', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='analytics', to='listing.listing')),
            ],
            options={
                'verbose_name_plural': '5. Statistiques',
            },
        ),
        migrations.CreateModel(
            name='Media',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to='listing_media/')),
                ('type', models.CharField(choices=[('IMG', 'Image'), ('DOC', 'Document'), ('VID', 'Vidéo')], max_length=3)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('is_primary', models.BooleanField(default=False)),
                ('listing', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='media', to='listing.listing')),
            ],
            options={
                'verbose_name_plural': '9. Medias',
                'ordering': ['-is_primary', '-uploaded_at'],
            },
        ),
        migrations.CreateModel(
            name='SocialMediaLinks',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('facebook', models.URLField(blank=True, default=None, null=True)),
                ('instagram', models.URLField(blank=True, default=None, null=True)),
                ('twitter', models.URLField(blank=True, default=None, null=True)),
                ('linkedin', models.URLField(blank=True, default=None, null=True)),
                ('listing', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='social_media', to='listing.listing')),
            ],
            options={
                'verbose_name_plural': '7. Réseaux sociaux',
            },
        ),
        migrations.CreateModel(
            name='SubCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('slug', models.SlugField(blank=True, null=True, unique=True)),
                ('description', models.TextField(blank=True, default='', null=True)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subcategories', to='listing.category')),
            ],
            options={
                'verbose_name_plural': '2. Sous-categories',
                'ordering': ['-id'],
                'unique_together': {('category', 'name')},
            },
        ),
        migrations.AddField(
            model_name='listing',
            name='subcategory',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='listing.subcategory'),
        ),
        migrations.CreateModel(
            name='TaggedListing',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.IntegerField(db_index=True, verbose_name='object ID')),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(app_label)s_%(class)s_tagged_items', to='contenttypes.contenttype', verbose_name='content type')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tagged_listings', to='listing.customtag')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='listing',
            name='tags',
            field=taggit.managers.TaggableManager(blank=True, help_text='List of tags for this listing', through='listing.TaggedListing', to='listing.CustomTag', verbose_name='Tags'),
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('comment', models.TextField()),
                ('moderation_status', models.CharField(choices=[('PEN', 'En attente'), ('APP', 'Approuvé'), ('REJ', 'Rejeté')], default='PEN', max_length=3)),
                ('is_visible', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('listing', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='listing.listing')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': '4. Avis',
                'indexes': [models.Index(fields=['moderation_status'], name='listing_rev_moderat_1ac98e_idx'), models.Index(fields=['is_visible'], name='listing_rev_is_visi_b6e6e6_idx')],
                'unique_together': {('user', 'listing')},
            },
        ),
        migrations.AddIndex(
            model_name='listing',
            index=models.Index(fields=['category'], name='listing_lis_categor_4471b5_idx'),
        ),
        migrations.AddIndex(
            model_name='listing',
            index=models.Index(fields=['subcategory'], name='listing_lis_subcate_04149e_idx'),
        ),
        migrations.AddIndex(
            model_name='listing',
            index=models.Index(fields=['status'], name='listing_lis_status_154a88_idx'),
        ),
        migrations.AddIndex(
            model_name='listing',
            index=models.Index(fields=['type'], name='listing_lis_type_8e9d66_idx'),
        ),
        migrations.AddIndex(
            model_name='listing',
            index=models.Index(fields=['search_vector'], name='listing_lis_search__900708_idx'),
        ),
        migrations.AddIndex(
            model_name='listing',
            index=models.Index(fields=['slug'], name='listing_lis_slug_4dac54_idx'),
        ),
    ]
